generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  BARBER
  ADMIN
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  REFUNDED
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  role         Role
  barbershops  Barbershop[]
  barbers      Barber[]
  appointments Appointment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([role])
}

model Barbershop {
  id           Int           @id @default(autoincrement())
  name         String
  location     String
  ownerId      Int
  owner        User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  barbers      Barber[]
  services     Service[]
  appointments Appointment[]
  statistics   Statistic[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Barber {
  id           Int           @id @default(autoincrement())
  userId       Int
  barbershopId Int
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  barbershop   Barbershop    @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  statistics   Statistic[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Service {
  id           Int           @id @default(autoincrement())
  barbershopId Int
  serviceName  String
  description  String
  price        Float
  duration     Int
  isActive     Boolean       @default(true)
  category     String?
  imageUrl     String?
  barbershop   Barbershop    @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([barbershopId])
}

model Appointment {
  id              Int               @id @default(autoincrement())
  clientId        Int
  barberId        Int
  serviceId       Int
  barbershopId    Int
  appointmentDate DateTime
  status          AppointmentStatus
  client          User              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  barber          Barber            @relation(fields: [barberId], references: [id], onDelete: Cascade)
  service         Service           @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  barbershop      Barbershop        @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
  payment         Payment?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Payment {
  id              Int           @id @default(autoincrement())
  appointmentId   Int           @unique
  amount          Float
  currency        String
  paymentStatus   PaymentStatus
  stripePaymentId String
  appointment     Appointment   @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Statistic {
  id                Int        @id @default(autoincrement())
  barberId          Int
  barbershopId      Int
  totalAppointments Int
  totalIncome       Float
  averageRating     Float
  totalReviews      Int
  barber            Barber     @relation(fields: [barberId], references: [id], onDelete: Cascade)
  barbershop        Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}
