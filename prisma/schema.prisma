generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BarberRole {
  OWNER
  BARBER
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  password       String
  role           Role
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  appointments   Appointment[]
  auditLogs      AuditLog[]
  barberProfiles BarberProfile[]
  accessRequests AccessRequest[]

  @@index([role])
}

model Barbershop {
  id             String          @id @default(uuid())
  name           String
  address        String
  city           String
  state          String
  zipCode        String
  additionalInfo String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  appointments   Appointment[]
  barberProfiles BarberProfile[]
  services       Service[]
  statistics     Statistic[]
  accessRequests AccessRequest[]

  @@index([city, zipCode])
}

model BarberProfile {
  id           String        @id @default(uuid())
  userId       String
  barbershopId String
  role         BarberRole
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  barbershop   Barbershop    @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  statistics   Statistic[]

  @@unique([userId, barbershopId])
}

model Service {
  id           String               @id @default(uuid())
  serviceName  String
  description  String
  price        Float
  duration     Int
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  barbershopId String
  category     String?
  imageUrl     String?
  isActive     Boolean              @default(true)
  deletedAt    DateTime?
  appointments AppointmentService[]
  barbershop   Barbershop           @relation(fields: [barbershopId], references: [id], onDelete: Cascade)

  @@index([barbershopId])
}

model Appointment {
  id              String               @id @default(uuid())
  clientId        String
  barberProfileId String
  appointmentDate DateTime
  status          AppointmentStatus
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  barbershopId    String
  barberProfile   BarberProfile        @relation(fields: [barberProfileId], references: [id], onDelete: Cascade)
  barbershop      Barbershop           @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
  client          User                 @relation(fields: [clientId], references: [id], onDelete: Cascade)
  services        AppointmentService[]
  payment         Payment?
}

model AppointmentService {
  id            String      @id @default(uuid())
  appointmentId String
  serviceId     String
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  service       Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([appointmentId, serviceId])
}

model Payment {
  id              String        @id @default(uuid())
  appointmentId   String        @unique
  amount          Float
  currency        String
  paymentStatus   PaymentStatus
  stripePaymentId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  appointment     Appointment   @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

model Statistic {
  id                String        @id @default(uuid())
  barberProfileId   String
  barbershopId      String
  totalAppointments Int
  totalIncome       Float
  averageRating     Float
  totalReviews      Int
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  barberProfile     BarberProfile @relation(fields: [barberProfileId], references: [id], onDelete: Cascade)
  barbershop        Barbershop    @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  changes   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AccessRequest {
  id           String             @id @default(uuid())
  barbershopId String
  userId       String
  status       AccessRequestStatus
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  barbershop   Barbershop         @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  CLIENT
  BARBER
  ADMIN
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  REFUNDED
}

enum AccessRequestStatus {
  PENDING
  APPROVED
  REJECTED
}