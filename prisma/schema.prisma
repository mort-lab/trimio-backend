generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  BARBER
  ADMIN
}



enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  REFUNDED
}

model User {
  id         Int          @id @default(autoincrement())
  email      String       @unique
  password   String
  role       Role         // Usando enum
  barbershops Barbershop[]
  barbers     Barber[]
  appointments Appointment[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@index([role])
}

model Barbershop {
  id          Int         @id @default(autoincrement())
  name        String
  location    String
  ownerId     Int
  owner       User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  barbers     Barber[]
  statistics  Statistic[] // Relación inversa con Statistic
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Barber {
  id          Int        @id @default(autoincrement())
  userId      Int
  barbershopId Int
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  barbershop  Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
  services    Service[]
  appointments Appointment[]
  statistics  Statistic[]  // Relación inversa con Statistic
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Service {
  id          Int        @id @default(autoincrement())
  barberId    Int
  serviceName String
  description String
  price       Float
  duration    Int        // Duración en minutos
  barber      Barber     @relation(fields: [barberId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Appointment {
  id             Int       @id @default(autoincrement())
  clientId       Int
  barberId       Int
  serviceId      Int
  appointmentDate DateTime
  status         AppointmentStatus // Usando enum
  client         User      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  barber         Barber    @relation(fields: [barberId], references: [id], onDelete: Cascade)
  service        Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  payments       Payment[] 
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}


model Payment {
  id             Int      @id @default(autoincrement())
  appointmentId  Int
  amount         Float
  currency       String
  paymentStatus  PaymentStatus // Usando enum
  stripePaymentId String
  appointment    Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}



model Statistic {
  id               Int      @id @default(autoincrement())
  barberId         Int
  barbershopId     Int
  totalAppointments Int
  totalIncome      Float
  averageRating    Float
  totalReviews     Int
  barber           Barber   @relation(fields: [barberId], references: [id], onDelete: Cascade)
  barbershop       Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}